// Learn more about F# at http://fsharp.org

open System

let редуцируй поУмолчанию функция список =
    let rec рекурсия =
        function
        | э :: эы -> рекурсия эы |> функция э
        | [] -> поУмолчанию
    рекурсия список

let степени = ['⁰'; 'ⁱ'; '²'; '³'; '⁴'; '⁵'; '⁶'; '⁷'; '⁸'; '⁹']
// Дано
let случай = Random()
let количествоПеременных = 1
let количествоИндексов = 2
let доКоэффициент = 5
let количествоМономов = 3

let перемешать список = List.sortBy (fun _ -> случай.Next()) список
let взятьИзСписка = List.take
let переменные = перемешать ['a'..'z'] |> взятьИзСписка количествоПеременных

let моном () =
    случай.Next (- доКоэффициент, доКоэффициент + 1)
    , List.map (fun переменная ->
        переменная, случай.Next количествоИндексов
    ) переменные

let многочлен () = List.init количествоМономов (fun _ -> моном ())

let уравнение = многочлен (), многочлен ()

let текстИзПеременной (переменная, индекс) =
    match индекс with
    | 0 -> ""
    | 1 -> string переменная
    | _ -> sprintf "%c%c" переменная степени.[индекс]

let текстИзМонома (коэффициент, переменные) =
    let текстПеременных =
        List.map текстИзПеременной переменные |> редуцируй "" (+)
    match коэффициент, текстПеременных with
    | -1, "" -> ""
    | -1, _ -> "- " + текстПеременных
    | 0, _ -> ""
    | 1, "" -> ""
    | 1, _ -> "+ " + текстПеременных
    | x, _ when x < 0 ->
        List.map текстИзПеременной переменные
        |> редуцируй "" (+)
        |> sprintf "- %i%s" -коэффициент
    | x, _ ->
        List.map текстИзПеременной переменные
        |> редуцируй "" (+)
        |> sprintf "+ %i%s" коэффициент

let текстИзМногочлена многочлен =
    let текст =
        List.map текстИзМонома многочлен
        |> List.filter ((<>) "")
        |> редуцируй "" (sprintf "%s %s") 
    match текст with
    | "" -> "0"
    | другиеВарианты -> другиеВарианты

let текстИзУровнения (леваяЧасть, праваяЧасть) =
    текстИзМногочлена леваяЧасть + " = " + текстИзМногочлена праваяЧасть


[<EntryPoint>]
let main argv =
    do текстИзУровнения уравнение |> printfn "%s"
    0 // return an integer exit code
